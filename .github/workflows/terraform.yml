# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#

#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

# name: CI

# on: [push]

# jobs:
#   phpunit:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./app
#     steps:
#       - uses: actions/checkout@v1
#       - name: Setup Symfony
#         run: .env.dev .env
#       - name: Install Composer Dependencies
#         run: composer install --prefer-dist
#       - name: Run Tests
#         run: php bin/phpunit

# jobs:
#   phpunit:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v1
#       - name: Setup Symfony
#         working-directory: ./app
#         run: cp .env.dev .env
#       - name: Install Composer Dependencies
#         working-directory: ./app
#         run: composer install --prefer-dist
#       - name: Run Tests
#         working-directory: ./app
#         run: php bin/phpunit

# jobs:
#   phpunit:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v1
#       - name: Setup and run tests
#         working-directory: ./app
#         run: |
#           cp .env.dev .env
#           composer install --prefer-dist
#           php bin/phpunit

    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-2
    #     role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    #     role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
    #     role-duration-seconds: 1200
    #     role-session-name: MySessionName

######
name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      packages: write
      contents: read
      id-token: write

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./aws/web

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: print working-directory
      run: |
        pwd 
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} #arn:aws:iam::123456789100:role/my-github-actions-role
        # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Check access
      run: |
        aws s3 ls
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
